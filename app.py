import streamlit as st
from classes.producao import Producao
from utils.salvar_json import salvar_producao
from utils.relatorio import RelatorioExcel
from datetime import datetime
import os

# --- Fun√ß√µes de Utilit√°rio ---
def clear_json_data():
    """Apaga o arquivo de dados JSON."""
    file_path = "database/producao.json"
    if os.path.exists(file_path):
        os.remove(file_path)
        return True
    return False

# --- Configura√ß√£o da P√°gina e T√≠tulo ---
st.set_page_config(page_title="Sistema de dados", layout="wide")
st.title("üìã Registro de Produ√ß√£o")

# Inicializa o estado de sess√£o para a confirma√ß√£o
if 'confirm_clear' not in st.session_state:
    st.session_state.confirm_clear = False

st.markdown("### Preencha os dados abaixo para registrar uma nova produ√ß√£o:")

# --- Formul√°rio de Registro de Produ√ß√£o ---
col1, col2, col3, col4 = st.columns(4)
with col1:
    data = st.date_input("üìÖ Data da produ√ß√£o", value=datetime.today())
with col2:
    turno = st.selectbox("üåô Turno", ["1", "2", "3"])
with col3:
    horario_inicio = st.time_input("‚è∞ Hora de In√≠cio")
with col4:
    horario_termino = st.time_input("‚è∞ Hora de T√©rmino")

setor = st.selectbox("üè≠ Setor", ["Dobra", "Serra", "Solda", "Retrabalho", "Etiquetagem"])

col5, col6 = st.columns(2)
with col5:
    cliente = st.text_input("üë§ Cliente")
with col6:
    modelo = st.text_input("üì¶ Modelo")

of = st.text_input("üìë Ordem de Fabrica√ß√£o (OF)")

col7, col8 = st.columns(2)
with col7:
    qtd_aprovada = st.number_input("‚úÖ Quantidade Aprovada", min_value=0, step=1)
with col8:
    qtd_retrabalho = st.number_input("‚ôªÔ∏è Quantidade Retrabalhada", min_value=0, step=1)

motivo = st.text_area("‚ö†Ô∏è Motivo das Falhas", placeholder="Descreva o problema...")
responsavel = st.text_input("üßë‚Äçüîß Respons√°vel")

# Bot√£o para salvar a produ√ß√£o
if st.button("üíæ Salvar Produ√ß√£o", use_container_width=True):
    nova_producao = Producao(
        data=str(data),
        HORA_INICIO=str(horario_inicio),
        HORA_TERMINO=str(horario_termino),
        setor=setor,
        cliente=cliente,
        modelo=modelo,
        of=of,
        qtd_aprovada=qtd_aprovada,
        qtd_retrabalho=qtd_retrabalho,
        motivo_falha=motivo,
        responsavel=responsavel,
        turno=turno
    )
    salvar_producao(nova_producao)
    st.success("‚úÖ Produ√ß√£o salva com sucesso!")



st.markdown("### Relat√≥rios")

# Bot√£o para gerar o relat√≥rio em Excel
if st.button("üìä Gerar Relat√≥rio Excel", use_container_width=True):
    with st.spinner('Gerando relat√≥rio...'):
        relatorio = RelatorioExcel()
        relatorio.criar_base()
        relatorio.preencher_planilha()
        relatorio.formatar_planilha()
        relatorio.salvar_relatorio()
    st.success("üéâ Relat√≥rio Excel gerado com sucesso!")
    st.info("O arquivo 'base_producao.xlsx' foi salvo na pasta 'relatorios'.")



### Limpeza de Dados

# Bot√£o principal para iniciar a limpeza
if st.button("üî¥ Limpar todos os dados", use_container_width=True):
    st.session_state.confirm_clear = True

# L√≥gica da confirma√ß√£o
if st.session_state.confirm_clear:
    st.warning("‚ö†Ô∏è **ATEN√á√ÉO:** Esta a√ß√£o √© irrevers√≠vel!")
    st.write("Tem certeza que deseja apagar **TODO** o hist√≥rico de produ√ß√£o?")
    
    col_yes, col_no = st.columns(2)
    with col_yes:
        if st.button("Sim, apagar tudo!", use_container_width=True):
            if clear_json_data():
                st.success("‚úÖ Dados antigos apagados com sucesso!")
            else:
                st.error("‚ùå O arquivo de dados n√£o foi encontrado. Nenhum dado foi apagado.")
            st.session_state.confirm_clear = False
            st.rerun()  # Recarrega a p√°gina para atualizar a interface
    with col_no:
        if st.button("N√£o, cancelar", use_container_width=True):
            st.session_state.confirm_clear = False
            st.info("Opera√ß√£o cancelada.")
            st.rerun()  # Recarrega a p√°gina para atualizar a interface